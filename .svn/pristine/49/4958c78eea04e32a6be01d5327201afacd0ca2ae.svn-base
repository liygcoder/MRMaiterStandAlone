package core;

import java.util.ArrayList;
import java.util.Scanner;



import util.TaskCheak;
import util.TaskStart;

import data.DataStructure;

public class Master<K,V,D,E> extends Thread {
    TaskStart tStart;
    TaskCheak tCheak;
	long checkPeriod;//检测周期
	D threshold;//阈值
	MaiterKernel<K,V,D,E> kernel;
	GlobalVariable<K,V,D,E> globalVariable;
	MaiterAPI<K,V,D,E> api;
	Master(ArrayList<DataStructure<K,V,D,E>> data,GlobalInformation global,Helper<K, V, D, E> helper){
		tStart = helper.tStart;
		tCheak = helper.tCheak;
		checkPeriod = global.snapshot;//master每隔ms 检测一次
		threshold = helper.getThreshold();//收敛的阈值
	    globalVariable=helper.globalVariable;
	    api=helper.api;
	    kernel =new MaiterKernel<K,V,D,E>(api,data,0);
	}
	
	public void run(){//线程入口
		System.out.println("Maiter starts to run...");
	 	long kernelStartTime = System.currentTimeMillis();//开始时间
		/*
		 * kernel1开始检测
		 */
	 	System.out.println("Maiter starts to read the inputdata");
	 	try {//kernel1 开始
	 		tStart.synchronous(1,0);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		try {//检测kernel1结束检测
			tCheak.synchronous(1,0);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		long kernelEndTime = System.currentTimeMillis();//开始时间
		long kernelTime=(kernelEndTime-kernelStartTime)/1000;
		System.out.println("Read data,kernel1 time="+kernelTime);
		
		
		/*
		 * kernel2开始检测
		 */
	    kernelStartTime = System.currentTimeMillis();//开始时间
	 	System.out.println("Maiter starts to Iterative compute");
	 	try {//通知各个worker，迭代计算开始
	 		tStart.synchronous(2,0);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	 	//kernel2终止检测
	 	terminate();
		kernelEndTime = System.currentTimeMillis();//开始时间
		kernelTime=(kernelEndTime-kernelStartTime)/1000;
		System.out.println("Iterator computing,kernel2 time="+kernelTime);
		
	 	/*
	 	 * kernel3结束检测
	 	 */
		kernelStartTime = System.currentTimeMillis();//开始时间
	 	try {//检测kernel1结束检测
			tCheak.synchronous(1,0);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	 	kernelEndTime = System.currentTimeMillis();//开始时间
		kernelTime=(kernelEndTime-kernelStartTime)/1000;
		System.out.println("Write result,kernel3 time="+kernelTime);
	 	//算法终止
	 	System.out.println("success");
	 	System.out.println("Maiter stopped！");
	}
	
    void terminate() {
    	boolean termination = false;
	    while(!termination){	
	      try {//master checkPeriod的周期进行检测
	    	  sleep(checkPeriod);
	    	  D aggregationGlobal = globalVariable.readAggregation();
	    	  if(aggregationGlobal.equals(api.default_v()))continue;//只要收集不全，就继续等待
	    	 // System.out.println("aggregationGlobal="+aggregationGlobal);
	          termination = kernel.terminate(threshold,aggregationGlobal);
		   } catch (InterruptedException e) {
			  e.printStackTrace();
		   }
		}
	    System.out.println("Maiter starts to write result");
	    IteratorFinished.writeIteratorFinished(true);
	}
}
